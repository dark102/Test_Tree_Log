// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Test_Tree_Log.Service;

#nullable disable

namespace Test_Tree_Log.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Test_Tree_Log.Models.Child", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Childid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("treeid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("Childid");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("treeid");

                    b.ToTable("child");
                });

            modelBuilder.Entity("Test_Tree_Log.Models.ExceptionData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("exceptionMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("exceptionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("inerExceptionDataid")
                        .HasColumnType("integer");

                    b.Property<string>("stackTracert")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("inerExceptionDataid");

                    b.ToTable("ExceptionData");
                });

            modelBuilder.Entity("Test_Tree_Log.Models.ExceptionJournal", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("bodyRequest")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("eventID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("exceptionDataid")
                        .HasColumnType("integer");

                    b.Property<string>("paramRequest")
                        .HasColumnType("text");

                    b.Property<string>("pathRequest")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("exceptionDataid");

                    b.ToTable("exceptionJournal");
                });

            modelBuilder.Entity("Test_Tree_Log.Models.Tree", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("tree");
                });

            modelBuilder.Entity("Test_Tree_Log.Models.Child", b =>
                {
                    b.HasOne("Test_Tree_Log.Models.Child", null)
                        .WithMany("children")
                        .HasForeignKey("Childid");

                    b.HasOne("Test_Tree_Log.Models.Tree", null)
                        .WithMany("children")
                        .HasForeignKey("treeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test_Tree_Log.Models.ExceptionData", b =>
                {
                    b.HasOne("Test_Tree_Log.Models.ExceptionData", "inerExceptionData")
                        .WithMany()
                        .HasForeignKey("inerExceptionDataid");

                    b.Navigation("inerExceptionData");
                });

            modelBuilder.Entity("Test_Tree_Log.Models.ExceptionJournal", b =>
                {
                    b.HasOne("Test_Tree_Log.Models.ExceptionData", "exceptionData")
                        .WithMany()
                        .HasForeignKey("exceptionDataid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("exceptionData");
                });

            modelBuilder.Entity("Test_Tree_Log.Models.Child", b =>
                {
                    b.Navigation("children");
                });

            modelBuilder.Entity("Test_Tree_Log.Models.Tree", b =>
                {
                    b.Navigation("children");
                });
#pragma warning restore 612, 618
        }
    }
}
